def is_prime(i):
    num = 0
    for j in range(1,i+1):
        if i%j == 0:
            num += 1
    if num ==2:
        return True
    return False

def main_func_howmany_prime_1(numbers):
    answer = []
    from itertools import permutations as pm
    mypm = set([int("".join(item)) for i in range(len(numbers)) for item in set(pm(list(numbers), i+1))])
    for i in mypm:
        answer.append(is_prime(i))
    return answer.count(True)

main_func_howmany_prime("17")





OR





def main_func_howmany_prime_2(numbers):
    answer = set()
    maximum = 10000000
    prime_lst = [False, False] + [True] * maximum   
    for idx, num in enumerate(prime_lst):
        if num:
            k = idx*2
            while k<=maximum:
                prime_lst[k] = False
                k+=idx
        for i in range(1,len(numbers)+1):
            perm = permutations(list(numbers),i)
            for i in list(perm):
                num = int("".join(list(i)))
                if prime_lst[num]:      # True 라면
                    answer.add(num)
        return len(answer)

main_func_howmany_prime_2("17")
